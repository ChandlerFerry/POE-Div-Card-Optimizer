use std::collections::HashSet;
use rand::seq::SliceRandom;
use serde::{Deserialize, Serialize};
use std::fs;
use std::sync::{Arc, Mutex};
use std::thread;
use lazy_static::lazy_static;

const NUM_THREADS: usize = 18;

#[derive(Debug, Deserialize, Clone)]
struct Card {
    name: String,
    drop: Option<DropInfo>,
    price: f64,
    weight: Option<f64>,
    stack: f64,
}

#[derive(Debug, Deserialize, Clone)]
struct DropInfo {
    #[serde(default = "default_max_level")]
    max_level: Option<u32>,
    areas: Vec<String>,
}

fn default_max_level() -> Option<u32> {
    Some(100)
}

const ALL_MAPS: [&str; 116] = [
    "ForbiddenWoods",
    "ColdRiver_",
    "FrozenCabins",
    // "Summit",
    "Iceberg",
    "Scriptorium",
    "Museum",
    "Academy",
    "DrySea",
    "Dunes",
    "DesertSpring",
    // "Desert",
    "MineralPools",
    "CrystalOre",
    "TortureChamber",
    "Grotto",
    "Wharf",
    "FloodedMine",
    "Waterways",
    "Vault",
    // "Coves",
    "Peninsula",
    "Geode",
    "AshenWood",
    "SpiderForest",
    "Lair",
    "Thicket",
    // "DarkForest",
    "TropicalIsland",
    // "Ramparts",
    "Stagnation",
    "JungleValley",
    "BrambleValley",
    "SunkenCity",
    // "AncientCity",
    "VaalPyramid",
    "Alleyways",
    // "Bazaar",
    "Arcade",
    "Port",
    "MoonTemple",
    "Factory",
    // "RelicChambers",
    // "Laboratory",
    // "Dig",
    "Excavation",
    "Orchard",
    "Plaza",
    // "Chateau",
    "Conservatory",
    "Temple",
    "Cemetery",
    "GraveTrough",
    "Graveyard",
    "LavaChamber",
    "BoneCrypt",
    "Bog",
    // "MudGeyser",
    "Marshes",
    "Basilica",
    "Residence",
    "Arsenal",
    // "Colonnade",
    // "Ghetto",
    "Promenade",
    // "Precinct",
    // "OvergrownRuin",
    "OvergrownShrine",
    // "Core",
    "Courtyard",
    "Terrace",
    "Gardens",
    "Strand",
    // "Caldera",
    "Shore",
    "LavaLake",
    "Estuary",
    "Volcano",
    "Foundry",
    "UndergroundSea",
    "CursedCrypt",
    "Necropolis",
    "AcidLakes",
    "ArachnidNest",
    "ArachnidTomb",
    "AridLake",
    "Armoury",
    "Atoll",
    "Barrows",
    "Beach",
    "Belfry",
    "BurialChambers",
    "Cage",
    "Canyon",
    // "Carcass",
    "CastleRuins",
    "Cells",
    "Channel",
    "CitySquare",
    // "Colosseum",
    "CoralRuins",
    "Courthouse",
    // "Tribunal",
    "CrimsonTemple",
    "CrimsonTownship",
    "DefiledCathedral",
    "Dungeon",
    "Fields",
    "ForkingRiver",
    "Springs",
    "HauntedMansion",
    // "InfestedValley",
    // "IvoryTemple",
    "Leyline",
    "Lighthouse",
    "Lookout",
    "Malformation",
    "Mausoleum",
    "Maze",
    // "Mesa",
    "Palace",
    "Park",
    "Pen",
    "Phantasmagoria",
    "Pier",
    "Pit",
    "Plateau",
    "PrimordialPool",
    // "Racecourse",
    "Reef",
    // "Sepulchre",
    "Shipyard",
    "Shrine",
    "Siege",
    "Silo",
    // "SpiderLair",
    "SulphurVents",
    "Tower",
    "ToxicSewer",
    "UndergroundRiver",
    // "VaalTemple",
    "Villa",
    "WastePool",
    "Wasteland",
];

const CARD_PRICE_FLOOR_FILTER: f64 = 6.0;
const CARD_WEIGHT_FLOOR_FILTER: f64 = 0.0;
const GLOBAL_DROP_RATE: f64 = 7954753.0;
const AREA_LEVEL: u32 = 83;

const USE_FORCE_REMOVE_FILTER: bool = true;
const USE_FORCE_SHOW_FILTER: bool = true;
lazy_static! {
    static ref FORCE_REMOVE_V_FILTER: HashSet<String> = HashSet::new();
}

lazy_static! {
    static ref FORCE_REMOVE_FILTER: HashSet<String> = {
        let mut set = HashSet::new();
        set.extend(vec![
            "The Easy Stroll",
            "The Lunaris Priestess",
            "The Explorer",
            "The Mountain",
            "Boundless Realms",
            "Azure Rage",
            "Left to Fate",
            "Might is Right",
            "Scholar of the Seas",
            "Grave Knowledge",
            "The Wolverine",
            "Blind Venture",
            "Hunter's Resolve",
            "Alivia's Grace",
            "The Admirer",
            "The Surgeon",
            "The Wolf's Shadow",
            "Shard of Fate",
            "Jack in the Box",
            "Last Hope",
            "Mitts",
            "The Battle Born",
            "The Sun",
            "The Demoness",
            "The Sigil",
            "The Twins",
            "The Inoculated",
            "The Army of Blood",
            "The Visionary",
            "The Gladiator",
            "Gemcutter's Promise",
            "The Web",
            "The Sword King's Salute",
            "Boon of Justice",
            "The Penitent",
            "The Warden",
            "The Cache",
            "Lysah's Respite",
            "The Fathomless Depths",
            "The Harvester",
            "The Fox",
            "Volatile Power",
            "The Endurance",
            "The Wolf",
            "Time-Lost Relic",
            "The Rite of Elements",
            "Gift of the Gemling Queen",
            "The Standoff",
            "Prosperity",
            "Heterochromia",
            "The Insatiable",
            "The Incantation",
            "The Betrayal",
            "The Pack Leader",
            "The Oath",
            "Vile Power",
            "The Surveyor",
            "Thunderous Skies",
            "The Tower",
            "The Stormcaller",
            "The Opulent",
            "The Blazing Fire",
            "The Journalist",
            "The Jeweller's Boon",
            "The Survivalist",
            "Glimmer of Hope",
            "Destined to Crumble",
            "The Scholar",
            "Thirst for Knowledge",
            "Rain of Chaos",
            "Emperor's Luck",
            "Loyalty",
            "A Sea of Blue",
            "The Lover",
            "The King's Blade",
            "The Catalyst",
            "Lantador's Lost Love",
            "The Scarred Meadow",
            "Rats",
            "The Witch",
            "Three Voices",
        ].iter().map(|s| s.to_string()));
        set
    };
}

lazy_static! {
    static ref FORCE_SHOW_FILTER: HashSet<String> = {
        let mut set = HashSet::new();
        set.extend(vec![
            "Acclimatisation",
            "The Primordial",
            "Three Faces in the Dark",
            "The Coming Storm",
            "The Porcupine",
            "Coveted Possession",
            "The Chains that Bind",
            "The Union",
            "Lucky Connections",
            "The Innocent",
            "Vinia's Token",
            "The Wrath",
            "No Traces",
            "Cursed Words",
            "Lingering Remnants",
            "Bowyer's Dream",
            "Draped in Dreams",
            "Emperor of Purity",
            "Immortal Resolve",
            "Imperial Legacy",
            "The Celestial Justicar",
            "The Dapper Prodigy",
            "The Dark Mage",
            "The Porcupine",
            "The Warlord",
        ].iter().map(|s| s.to_string()));
        set
    };
}

const REAL_CARD_RATE: (f64, u32) = (47.0, 100);

const PINNED_DPI: f64 = 75231.43071987167;

fn is_card_in_area(card: &Card, areas: &[&str]) -> bool {
    areas.iter().any(|&area| {
        let formatted_area = format!("MapWorlds{}", area);
        if let Some(drop_info) = &card.drop {
            drop_info.max_level >= Some(AREA_LEVEL) && drop_info.areas.iter().any(|area_name| area_name.eq_ignore_ascii_case(&formatted_area))
        } else {
            false
        }
    })
}

fn calculate_card_ev(stack: f64, card_count: f64, price: f64, use_stack_scarab: bool) -> (f64, f64) {
    let mut ev = 0.0;
    let mut drops = card_count;
    if use_stack_scarab {
        ev = card_count * 0.2 * stack * price + card_count * 0.8 * price;
        drops = card_count * 0.2 * stack + card_count * 0.8;
    } else {
        ev = card_count * price;
    }
    (ev, drops)
}

fn get_calculated_cards(areas: &[&str], all_cards: &[Card]) -> (f64, f64) {
    let mut total_raw_ev = 0.0;
    let mut total_stack_scarab_ev = 0.0;

    let map_cards: Vec<&Card> = all_cards.iter().filter(|&card| is_card_in_area(card, areas)).collect();
    let map_total_weight: f64 = map_cards.iter().map(|&card| card.weight.unwrap_or(0.0)).sum();
    let card_weight_baseline = all_cards.iter().find(|&card| card.name == "The Union").unwrap().weight.unwrap_or(0.0);
    let current_total_weight = map_total_weight + GLOBAL_DROP_RATE;
    let drop_pool_items = 1.0 / (card_weight_baseline / current_total_weight) * REAL_CARD_RATE.1 as f64;
    let dpi_multiplier = PINNED_DPI / drop_pool_items;

    let filtered_cards: Vec<&Card> = map_cards.iter().filter(|&card| {
        (card.price >= CARD_PRICE_FLOOR_FILTER && 
        !FORCE_REMOVE_V_FILTER.contains(&card.name) && 
        (!FORCE_REMOVE_FILTER.contains(&card.name) || !USE_FORCE_REMOVE_FILTER) && 
        card.weight.unwrap_or(0.0) > CARD_WEIGHT_FLOOR_FILTER) || 
        (FORCE_SHOW_FILTER.contains(&card.name) && USE_FORCE_SHOW_FILTER)
    }).cloned().collect();

    filtered_cards.iter().for_each(|&card| {
        if let Some(drop_info) = &card.drop {
            let individual_drop_rate = (card.weight.unwrap_or(0.0) / current_total_weight) * drop_pool_items;
            let drops_per_map = individual_drop_rate * dpi_multiplier;
            let (raw_ev, _) = calculate_card_ev(card.stack, drops_per_map, card.price, false);
            total_raw_ev += raw_ev;
            let (ss_ev, _) = calculate_card_ev(card.stack, drops_per_map, card.price, true);
            total_stack_scarab_ev += ss_ev;
        }
    });

    (total_raw_ev, total_stack_scarab_ev)
}

fn main() {
    let all_cards_data = fs::read_to_string("cards.json").expect("Failed to read cards.json");
    let all_cards: Vec<Card> = serde_json::from_str(&all_cards_data).expect("Failed to parse cards.json");

    let optimal_stack_scarab_ev = Arc::new(Mutex::new(0.0));

    let apoth_group = ["DefiledCathedral"];
    let doctor_group = ["Phantasmagoria"];
    let gift_group = ["GraveTrough"];
    let mirrorshard_group = ["Maze"];
    let fiend_group = ["Shrine"];
    // let fortunate_group = ["AridLake", "Atoll", "BurialChambers", "Canyon", "DesertSpring", "DrySea", "Dunes", "Estuary", "Fields", "JungleValley", "MineralPools", "Orchard", "Plateau", "Shore", "SulphurVents", "Terrace", "TropicalIsland"];

    // let apoth_group = ["CrimsonTemple", "CrimsonTownship", "DefiledCathedral"];
    // let doctor_group = ["BurialChambers", "Phantasmagoria", "SpiderForest", "WastePool"];
    // let gift_group = ["Cemetery", "GraveTrough", "Graveyard"];
    // // let fortunate_group = ["AridLake", "Atoll", "BurialChambers", "Canyon", "DesertSpring", "DrySea", "Dunes", "Estuary", "Fields", "JungleValley", "MineralPools", "Orchard", "Plateau", "Shore", "SulphurVents", "Terrace", "TropicalIsland"];
    // let mirrorshard_group = ["Maze"];

    let mut handles = vec![];

    for _ in 0..NUM_THREADS {
        let optimal_stack_scarab_ev = Arc::clone(&optimal_stack_scarab_ev);
        let all_cards_clone = all_cards.clone();

        let handle = thread::spawn(move || {
            let mut rng = rand::thread_rng();
            loop {
                let mut sampled_areas = Vec::new();
                
                // Add one random area from each group
                sampled_areas.push(*apoth_group.choose(&mut rng).unwrap());
                sampled_areas.push(*doctor_group.choose(&mut rng).unwrap());
                sampled_areas.push(*gift_group.choose(&mut rng).unwrap());
                sampled_areas.push(*mirrorshard_group.choose(&mut rng).unwrap());
                sampled_areas.push(*fiend_group.choose(&mut rng).unwrap());

                // Skip arid_group if Burial Chambers is selected
                // if selected_burial != "BurialChambers" {
                //     sampled_areas.push(*fortunate_group.choose(&mut rng).unwrap());
                // }

                // Shuffle ALL_MAPS and add the rest to fill up to 12
                let mut remaining_maps = ALL_MAPS.to_vec();
                remaining_maps.retain(|map| !sampled_areas.contains(map)); // Avoid duplicates
                remaining_maps.shuffle(&mut rng);
                sampled_areas.extend(remaining_maps.iter().take(12 - sampled_areas.len()));

                let (total_raw_ev, total_stack_scarab_ev) = get_calculated_cards(&sampled_areas, &all_cards_clone);
                {
                    let mut optimal_stack_scarab_ev = optimal_stack_scarab_ev.lock().unwrap();
                    if total_stack_scarab_ev > 10300.0 {
                        println!("[{}]: {:?}", total_stack_scarab_ev, sampled_areas);
                    } else if total_stack_scarab_ev > *optimal_stack_scarab_ev {
                        *optimal_stack_scarab_ev = total_stack_scarab_ev;
                        println!("[{}]: {:?}", *optimal_stack_scarab_ev, sampled_areas);
                    }
                }
            }
        });

        handles.push(handle);
    }

    for handle in handles {
        handle.join().unwrap();
    }
}